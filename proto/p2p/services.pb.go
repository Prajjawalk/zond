// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.8.0
// source: proto/p2p/services.proto

package p2p

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type P2PMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*P2PMessage_Req
	//	*P2PMessage_Resp
	Type isP2PMessage_Type `protobuf_oneof:"type"`
}

func (x *P2PMessage) Reset() {
	*x = P2PMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_p2p_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PMessage) ProtoMessage() {}

func (x *P2PMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PMessage.ProtoReflect.Descriptor instead.
func (*P2PMessage) Descriptor() ([]byte, []int) {
	return file_proto_p2p_services_proto_rawDescGZIP(), []int{0}
}

func (m *P2PMessage) GetType() isP2PMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *P2PMessage) GetReq() *Request {
	if x, ok := x.GetType().(*P2PMessage_Req); ok {
		return x.Req
	}
	return nil
}

func (x *P2PMessage) GetResp() *Response {
	if x, ok := x.GetType().(*P2PMessage_Resp); ok {
		return x.Resp
	}
	return nil
}

type isP2PMessage_Type interface {
	isP2PMessage_Type()
}

type P2PMessage_Req struct {
	Req *Request `protobuf:"bytes,1,opt,name=req,proto3,oneof"`
}

type P2PMessage_Resp struct {
	Resp *Response `protobuf:"bytes,2,opt,name=resp,proto3,oneof"`
}

func (*P2PMessage_Req) isP2PMessage_Type() {}

func (*P2PMessage_Resp) isP2PMessage_Type() {}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Request_PingReq
	//	*Request_BlockReq
	Type isRequest_Type `protobuf_oneof:"type"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_p2p_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_proto_p2p_services_proto_rawDescGZIP(), []int{1}
}

func (m *Request) GetType() isRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Request) GetPingReq() *PingReq {
	if x, ok := x.GetType().(*Request_PingReq); ok {
		return x.PingReq
	}
	return nil
}

func (x *Request) GetBlockReq() *BlockReq {
	if x, ok := x.GetType().(*Request_BlockReq); ok {
		return x.BlockReq
	}
	return nil
}

type isRequest_Type interface {
	isRequest_Type()
}

type Request_PingReq struct {
	PingReq *PingReq `protobuf:"bytes,1,opt,name=pingReq,proto3,oneof"`
}

type Request_BlockReq struct {
	BlockReq *BlockReq `protobuf:"bytes,2,opt,name=BlockReq,proto3,oneof"`
}

func (*Request_PingReq) isRequest_Type() {}

func (*Request_BlockReq) isRequest_Type() {}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Response_PingResp
	//	*Response_BlockResp
	Type isResponse_Type `protobuf_oneof:"type"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_p2p_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_p2p_services_proto_rawDescGZIP(), []int{2}
}

func (m *Response) GetType() isResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Response) GetPingResp() *PingResp {
	if x, ok := x.GetType().(*Response_PingResp); ok {
		return x.PingResp
	}
	return nil
}

func (x *Response) GetBlockResp() *BlockResp {
	if x, ok := x.GetType().(*Response_BlockResp); ok {
		return x.BlockResp
	}
	return nil
}

type isResponse_Type interface {
	isResponse_Type()
}

type Response_PingResp struct {
	PingResp *PingResp `protobuf:"bytes,1,opt,name=pingResp,proto3,oneof"`
}

type Response_BlockResp struct {
	BlockResp *BlockResp `protobuf:"bytes,2,opt,name=blockResp,proto3,oneof"`
}

func (*Response_PingResp) isResponse_Type() {}

func (*Response_BlockResp) isResponse_Type() {}

type PingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PingReq) Reset() {
	*x = PingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_p2p_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReq) ProtoMessage() {}

func (x *PingReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReq.ProtoReflect.Descriptor instead.
func (*PingReq) Descriptor() ([]byte, []int) {
	return file_proto_p2p_services_proto_rawDescGZIP(), []int{3}
}

func (x *PingReq) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PingResp) Reset() {
	*x = PingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_p2p_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResp) ProtoMessage() {}

func (x *PingResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResp.ProtoReflect.Descriptor instead.
func (*PingResp) Descriptor() ([]byte, []int) {
	return file_proto_p2p_services_proto_rawDescGZIP(), []int{4}
}

func (x *PingResp) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type BlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64 `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
}

func (x *BlockReq) Reset() {
	*x = BlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_p2p_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockReq) ProtoMessage() {}

func (x *BlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockReq.ProtoReflect.Descriptor instead.
func (*BlockReq) Descriptor() ([]byte, []int) {
	return file_proto_p2p_services_proto_rawDescGZIP(), []int{5}
}

func (x *BlockReq) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type BlockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64 `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
}

func (x *BlockResp) Reset() {
	*x = BlockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_p2p_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResp) ProtoMessage() {}

func (x *BlockResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResp.ProtoReflect.Descriptor instead.
func (*BlockResp) Descriptor() ([]byte, []int) {
	return file_proto_p2p_services_proto_rawDescGZIP(), []int{6}
}

func (x *BlockResp) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

var File_proto_p2p_services_proto protoreflect.FileDescriptor

var file_proto_p2p_services_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x32, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x32, 0x70, 0x22,
	0x5b, 0x0a, 0x0a, 0x50, 0x32, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x32, 0x70,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x32, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x65, 0x73, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x2b, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x48, 0x00, 0x52, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x07, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x28, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2c, 0x0a, 0x08, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0x41, 0x0a, 0x0b, 0x50, 0x32, 0x50, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x50, 0x32, 0x50, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x50, 0x32, 0x50, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f,
	0x7a, 0x6f, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x32, 0x70, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_p2p_services_proto_rawDescOnce sync.Once
	file_proto_p2p_services_proto_rawDescData = file_proto_p2p_services_proto_rawDesc
)

func file_proto_p2p_services_proto_rawDescGZIP() []byte {
	file_proto_p2p_services_proto_rawDescOnce.Do(func() {
		file_proto_p2p_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_p2p_services_proto_rawDescData)
	})
	return file_proto_p2p_services_proto_rawDescData
}

var file_proto_p2p_services_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_p2p_services_proto_goTypes = []interface{}{
	(*P2PMessage)(nil), // 0: p2p.P2PMessage
	(*Request)(nil),    // 1: p2p.Request
	(*Response)(nil),   // 2: p2p.Response
	(*PingReq)(nil),    // 3: p2p.PingReq
	(*PingResp)(nil),   // 4: p2p.PingResp
	(*BlockReq)(nil),   // 5: p2p.BlockReq
	(*BlockResp)(nil),  // 6: p2p.BlockResp
}
var file_proto_p2p_services_proto_depIdxs = []int32{
	1, // 0: p2p.P2PMessage.req:type_name -> p2p.Request
	2, // 1: p2p.P2PMessage.resp:type_name -> p2p.Response
	3, // 2: p2p.Request.pingReq:type_name -> p2p.PingReq
	5, // 3: p2p.Request.BlockReq:type_name -> p2p.BlockReq
	4, // 4: p2p.Response.pingResp:type_name -> p2p.PingResp
	6, // 5: p2p.Response.blockResp:type_name -> p2p.BlockResp
	0, // 6: p2p.P2PProtocol.Transmit:input_type -> p2p.P2PMessage
	0, // 7: p2p.P2PProtocol.Transmit:output_type -> p2p.P2PMessage
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_p2p_services_proto_init() }
func file_proto_p2p_services_proto_init() {
	if File_proto_p2p_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_p2p_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_p2p_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_p2p_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_p2p_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_p2p_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_p2p_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_p2p_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_p2p_services_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*P2PMessage_Req)(nil),
		(*P2PMessage_Resp)(nil),
	}
	file_proto_p2p_services_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Request_PingReq)(nil),
		(*Request_BlockReq)(nil),
	}
	file_proto_p2p_services_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Response_PingResp)(nil),
		(*Response_BlockResp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_p2p_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_p2p_services_proto_goTypes,
		DependencyIndexes: file_proto_p2p_services_proto_depIdxs,
		MessageInfos:      file_proto_p2p_services_proto_msgTypes,
	}.Build()
	File_proto_p2p_services_proto = out.File
	file_proto_p2p_services_proto_rawDesc = nil
	file_proto_p2p_services_proto_goTypes = nil
	file_proto_p2p_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// P2PProtocolClient is the client API for P2PProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PProtocolClient interface {
	Transmit(ctx context.Context, opts ...grpc.CallOption) (P2PProtocol_TransmitClient, error)
}

type p2PProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PProtocolClient(cc grpc.ClientConnInterface) P2PProtocolClient {
	return &p2PProtocolClient{cc}
}

func (c *p2PProtocolClient) Transmit(ctx context.Context, opts ...grpc.CallOption) (P2PProtocol_TransmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_P2PProtocol_serviceDesc.Streams[0], "/p2p.P2PProtocol/Transmit", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PProtocolTransmitClient{stream}
	return x, nil
}

type P2PProtocol_TransmitClient interface {
	Send(*P2PMessage) error
	Recv() (*P2PMessage, error)
	grpc.ClientStream
}

type p2PProtocolTransmitClient struct {
	grpc.ClientStream
}

func (x *p2PProtocolTransmitClient) Send(m *P2PMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PProtocolTransmitClient) Recv() (*P2PMessage, error) {
	m := new(P2PMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PProtocolServer is the server API for P2PProtocol service.
type P2PProtocolServer interface {
	Transmit(P2PProtocol_TransmitServer) error
}

// UnimplementedP2PProtocolServer can be embedded to have forward compatible implementations.
type UnimplementedP2PProtocolServer struct {
}

func (*UnimplementedP2PProtocolServer) Transmit(P2PProtocol_TransmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}

func RegisterP2PProtocolServer(s *grpc.Server, srv P2PProtocolServer) {
	s.RegisterService(&_P2PProtocol_serviceDesc, srv)
}

func _P2PProtocol_Transmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PProtocolServer).Transmit(&p2PProtocolTransmitServer{stream})
}

type P2PProtocol_TransmitServer interface {
	Send(*P2PMessage) error
	Recv() (*P2PMessage, error)
	grpc.ServerStream
}

type p2PProtocolTransmitServer struct {
	grpc.ServerStream
}

func (x *p2PProtocolTransmitServer) Send(m *P2PMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PProtocolTransmitServer) Recv() (*P2PMessage, error) {
	m := new(P2PMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _P2PProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "p2p.P2PProtocol",
	HandlerType: (*P2PProtocolServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transmit",
			Handler:       _P2PProtocol_Transmit_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/p2p/services.proto",
}
