// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: protos/validator-client/keymanager.proto

package validatorpb

import (
	protos "github.com/theQRL/zond/protos"
	github_com_theQRL_zond_consensus_types_primitives "github.com/theQRL/zond/consensus-types/primitives"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignResponse_Status int32

const (
	SignResponse_UNKNOWN   SignResponse_Status = 0
	SignResponse_SUCCEEDED SignResponse_Status = 1
	SignResponse_DENIED    SignResponse_Status = 2
	SignResponse_FAILED    SignResponse_Status = 3
)

// Enum value maps for SignResponse_Status.
var (
	SignResponse_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCEEDED",
		2: "DENIED",
		3: "FAILED",
	}
	SignResponse_Status_value = map[string]int32{
		"UNKNOWN":   0,
		"SUCCEEDED": 1,
		"DENIED":    2,
		"FAILED":    3,
	}
)

func (x SignResponse_Status) Enum() *SignResponse_Status {
	p := new(SignResponse_Status)
	*p = x
	return p
}

func (x SignResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_validator_client_keymanager_proto_enumTypes[0].Descriptor()
}

func (SignResponse_Status) Type() protoreflect.EnumType {
	return &file_protos_validator_client_keymanager_proto_enumTypes[0]
}

func (x SignResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignResponse_Status.Descriptor instead.
func (SignResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_protos_validator_client_keymanager_proto_rawDescGZIP(), []int{2, 0}
}

// ListPublicKeysResponse contains public keys
// for the validator secrets managed by the remote signer.
type ListPublicKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of 48 byte, BLS12-381 validating public keys.
	ValidatingPublicKeys [][]byte `protobuf:"bytes,2,rep,name=validating_public_keys,json=validatingPublicKeys,proto3" json:"validating_public_keys,omitempty"`
}

func (x *ListPublicKeysResponse) Reset() {
	*x = ListPublicKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_validator_client_keymanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicKeysResponse) ProtoMessage() {}

func (x *ListPublicKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_validator_client_keymanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicKeysResponse.ProtoReflect.Descriptor instead.
func (*ListPublicKeysResponse) Descriptor() ([]byte, []int) {
	return file_protos_validator_client_keymanager_proto_rawDescGZIP(), []int{0}
}

func (x *ListPublicKeysResponse) GetValidatingPublicKeys() [][]byte {
	if x != nil {
		return x.ValidatingPublicKeys
	}
	return nil
}

// SignRequest is a message type used by a keymanager
// as part of Prysm's accounts v2 implementation.
type SignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 48 byte public key corresponding to an associated private key
	// being requested to sign data.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Raw bytes signing root the client is requesting to sign. The client is
	// expected to determine these raw bytes from the appropriate BLS
	// signing domain as well as the signing root of the data structure
	// the bytes represent.
	SigningRoot []byte `protobuf:"bytes,2,opt,name=signing_root,json=signingRoot,proto3" json:"signing_root,omitempty"`
	// Signature domain and the beacon chain objects to allow server to verify
	// the contents and to prevent slashing.
	SignatureDomain []byte `protobuf:"bytes,3,opt,name=signature_domain,json=signatureDomain,proto3" json:"signature_domain,omitempty"`
	// Beacon chain objects. [100-200]
	//
	// Types that are assignable to Object:
	//	*SignRequest_Block
	//	*SignRequest_AttestationData
	//	*SignRequest_AggregateAttestationAndProof
	//	*SignRequest_Exit
	//	*SignRequest_Slot
	//	*SignRequest_Epoch
	//	*SignRequest_BlockAltair
	//	*SignRequest_SyncAggregatorSelectionData
	//	*SignRequest_ContributionAndProof
	//	*SignRequest_SyncMessageBlockRoot
	//	*SignRequest_BlockBellatrix
	//	*SignRequest_BlindedBlockBellatrix
	//	*SignRequest_Registration
	//	*SignRequest_BlockCapella
	//	*SignRequest_BlindedBlockCapella
	Object      isSignRequest_Object                                   `protobuf_oneof:"object"`
	SigningSlot github_com_theQRL_zond_consensus_types_primitives.Slot `protobuf:"varint,6,opt,name=signing_slot,json=signingSlot,proto3" json:"signing_slot,omitempty" cast-type:"github.com/theQRL/zond/consensus-types/primitives.Slot"`
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_validator_client_keymanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_validator_client_keymanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_protos_validator_client_keymanager_proto_rawDescGZIP(), []int{1}
}

func (x *SignRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SignRequest) GetSigningRoot() []byte {
	if x != nil {
		return x.SigningRoot
	}
	return nil
}

func (x *SignRequest) GetSignatureDomain() []byte {
	if x != nil {
		return x.SignatureDomain
	}
	return nil
}

func (m *SignRequest) GetObject() isSignRequest_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *SignRequest) GetBlock() *protos.BeaconBlock {
	if x, ok := x.GetObject().(*SignRequest_Block); ok {
		return x.Block
	}
	return nil
}

func (x *SignRequest) GetAttestationData() *protos.AttestationData {
	if x, ok := x.GetObject().(*SignRequest_AttestationData); ok {
		return x.AttestationData
	}
	return nil
}

func (x *SignRequest) GetAggregateAttestationAndProof() *protos.AggregateAttestationAndProof {
	if x, ok := x.GetObject().(*SignRequest_AggregateAttestationAndProof); ok {
		return x.AggregateAttestationAndProof
	}
	return nil
}

func (x *SignRequest) GetExit() *protos.VoluntaryExit {
	if x, ok := x.GetObject().(*SignRequest_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *SignRequest) GetSlot() github_com_theQRL_zond_consensus_types_primitives.Slot {
	if x, ok := x.GetObject().(*SignRequest_Slot); ok {
		return x.Slot
	}
	return github_com_theQRL_zond_consensus_types_primitives.Slot(0)
}

func (x *SignRequest) GetEpoch() github_com_theQRL_zond_consensus_types_primitives.Epoch {
	if x, ok := x.GetObject().(*SignRequest_Epoch); ok {
		return x.Epoch
	}
	return github_com_theQRL_zond_consensus_types_primitives.Epoch(0)
}

func (x *SignRequest) GetBlockAltair() *protos.BeaconBlockAltair {
	if x, ok := x.GetObject().(*SignRequest_BlockAltair); ok {
		return x.BlockAltair
	}
	return nil
}

func (x *SignRequest) GetSyncAggregatorSelectionData() *protos.SyncAggregatorSelectionData {
	if x, ok := x.GetObject().(*SignRequest_SyncAggregatorSelectionData); ok {
		return x.SyncAggregatorSelectionData
	}
	return nil
}

func (x *SignRequest) GetContributionAndProof() *protos.ContributionAndProof {
	if x, ok := x.GetObject().(*SignRequest_ContributionAndProof); ok {
		return x.ContributionAndProof
	}
	return nil
}

func (x *SignRequest) GetSyncMessageBlockRoot() []byte {
	if x, ok := x.GetObject().(*SignRequest_SyncMessageBlockRoot); ok {
		return x.SyncMessageBlockRoot
	}
	return nil
}

func (x *SignRequest) GetBlockBellatrix() *protos.BeaconBlockBellatrix {
	if x, ok := x.GetObject().(*SignRequest_BlockBellatrix); ok {
		return x.BlockBellatrix
	}
	return nil
}

func (x *SignRequest) GetBlindedBlockBellatrix() *protos.BlindedBeaconBlockBellatrix {
	if x, ok := x.GetObject().(*SignRequest_BlindedBlockBellatrix); ok {
		return x.BlindedBlockBellatrix
	}
	return nil
}

func (x *SignRequest) GetRegistration() *protos.ValidatorRegistrationV1 {
	if x, ok := x.GetObject().(*SignRequest_Registration); ok {
		return x.Registration
	}
	return nil
}

func (x *SignRequest) GetBlockCapella() *protos.BeaconBlockCapella {
	if x, ok := x.GetObject().(*SignRequest_BlockCapella); ok {
		return x.BlockCapella
	}
	return nil
}

func (x *SignRequest) GetBlindedBlockCapella() *protos.BlindedBeaconBlockCapella {
	if x, ok := x.GetObject().(*SignRequest_BlindedBlockCapella); ok {
		return x.BlindedBlockCapella
	}
	return nil
}

func (x *SignRequest) GetSigningSlot() github_com_theQRL_zond_consensus_types_primitives.Slot {
	if x != nil {
		return x.SigningSlot
	}
	return github_com_theQRL_zond_consensus_types_primitives.Slot(0)
}

type isSignRequest_Object interface {
	isSignRequest_Object()
}

type SignRequest_Block struct {
	// Phase0 objects.
	Block *protos.BeaconBlock `protobuf:"bytes,101,opt,name=block,proto3,oneof"`
}

type SignRequest_AttestationData struct {
	AttestationData *protos.AttestationData `protobuf:"bytes,102,opt,name=attestation_data,json=attestationData,proto3,oneof"`
}

type SignRequest_AggregateAttestationAndProof struct {
	AggregateAttestationAndProof *protos.AggregateAttestationAndProof `protobuf:"bytes,103,opt,name=aggregate_attestation_and_proof,json=aggregateAttestationAndProof,proto3,oneof"`
}

type SignRequest_Exit struct {
	Exit *protos.VoluntaryExit `protobuf:"bytes,104,opt,name=exit,proto3,oneof"`
}

type SignRequest_Slot struct {
	Slot github_com_theQRL_zond_consensus_types_primitives.Slot `protobuf:"varint,105,opt,name=slot,proto3,oneof" cast-type:"github.com/theQRL/zond/consensus-types/primitives.Slot"`
}

type SignRequest_Epoch struct {
	Epoch github_com_theQRL_zond_consensus_types_primitives.Epoch `protobuf:"varint,106,opt,name=epoch,proto3,oneof" cast-type:"github.com/theQRL/zond/consensus-types/primitives.Epoch"`
}

type SignRequest_BlockAltair struct {
	// Altair objects.
	BlockAltair *protos.BeaconBlockAltair `protobuf:"bytes,107,opt,name=block_altair,json=blockAltair,proto3,oneof"`
}

type SignRequest_SyncAggregatorSelectionData struct {
	SyncAggregatorSelectionData *protos.SyncAggregatorSelectionData `protobuf:"bytes,108,opt,name=sync_aggregator_selection_data,json=syncAggregatorSelectionData,proto3,oneof"`
}

type SignRequest_ContributionAndProof struct {
	ContributionAndProof *protos.ContributionAndProof `protobuf:"bytes,109,opt,name=contribution_and_proof,json=contributionAndProof,proto3,oneof"`
}

type SignRequest_SyncMessageBlockRoot struct {
	SyncMessageBlockRoot []byte `protobuf:"bytes,110,opt,name=sync_message_block_root,json=syncMessageBlockRoot,proto3,oneof"`
}

type SignRequest_BlockBellatrix struct {
	// Bellatrix objects.
	BlockBellatrix *protos.BeaconBlockBellatrix `protobuf:"bytes,111,opt,name=block_bellatrix,json=blockBellatrix,proto3,oneof"`
}

type SignRequest_BlindedBlockBellatrix struct {
	BlindedBlockBellatrix *protos.BlindedBeaconBlockBellatrix `protobuf:"bytes,112,opt,name=blinded_block_bellatrix,json=blindedBlockBellatrix,proto3,oneof"`
}

type SignRequest_Registration struct {
	// Builder objects.
	Registration *protos.ValidatorRegistrationV1 `protobuf:"bytes,113,opt,name=registration,proto3,oneof"`
}

type SignRequest_BlockCapella struct {
	// Capella objects.
	BlockCapella *protos.BeaconBlockCapella `protobuf:"bytes,114,opt,name=block_capella,json=blockCapella,proto3,oneof"`
}

type SignRequest_BlindedBlockCapella struct {
	BlindedBlockCapella *protos.BlindedBeaconBlockCapella `protobuf:"bytes,115,opt,name=blinded_block_capella,json=blindedBlockCapella,proto3,oneof"`
}

func (*SignRequest_Block) isSignRequest_Object() {}

func (*SignRequest_AttestationData) isSignRequest_Object() {}

func (*SignRequest_AggregateAttestationAndProof) isSignRequest_Object() {}

func (*SignRequest_Exit) isSignRequest_Object() {}

func (*SignRequest_Slot) isSignRequest_Object() {}

func (*SignRequest_Epoch) isSignRequest_Object() {}

func (*SignRequest_BlockAltair) isSignRequest_Object() {}

func (*SignRequest_SyncAggregatorSelectionData) isSignRequest_Object() {}

func (*SignRequest_ContributionAndProof) isSignRequest_Object() {}

func (*SignRequest_SyncMessageBlockRoot) isSignRequest_Object() {}

func (*SignRequest_BlockBellatrix) isSignRequest_Object() {}

func (*SignRequest_BlindedBlockBellatrix) isSignRequest_Object() {}

func (*SignRequest_Registration) isSignRequest_Object() {}

func (*SignRequest_BlockCapella) isSignRequest_Object() {}

func (*SignRequest_BlindedBlockCapella) isSignRequest_Object() {}

// SignResponse returned by a RemoteSigner gRPC service.
type SignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BLS12-381 signature for the data specified in the request.
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// Status of the signing response, standardized as an enum
	// to ensure different remote signing servers follow the
	// same conventions.
	Status SignResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=protos.validator.SignResponse_Status" json:"status,omitempty"`
}

func (x *SignResponse) Reset() {
	*x = SignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_validator_client_keymanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignResponse) ProtoMessage() {}

func (x *SignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_validator_client_keymanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignResponse.ProtoReflect.Descriptor instead.
func (*SignResponse) Descriptor() ([]byte, []int) {
	return file_protos_validator_client_keymanager_proto_rawDescGZIP(), []int{2}
}

func (x *SignResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignResponse) GetStatus() SignResponse_Status {
	if x != nil {
		return x.Status
	}
	return SignResponse_UNKNOWN
}

var File_protos_validator_client_keymanager_proto protoreflect.FileDescriptor

var file_protos_validator_client_keymanager_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x14, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xeb, 0x0a, 0x0a, 0x0b, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x1f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2b, 0x0a, 0x04, 0x65, 0x78, 0x69,
	0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x65, 0x78, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x3a, 0x82, 0xb5, 0x18, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x7a, 0x6f, 0x6e, 0x64,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x53, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x7a,
	0x6f, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3e, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x6c, 0x74, 0x61, 0x69, 0x72, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x74, 0x61, 0x69, 0x72, 0x48, 0x00,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x74, 0x61, 0x69, 0x72, 0x12, 0x6a, 0x0a,
	0x1e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x79,
	0x6e, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x37, 0x0a, 0x17, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x14, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x62, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x72, 0x69, 0x78, 0x48,
	0x00, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x12, 0x5d, 0x0a, 0x17, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x62, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x70, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x65, 0x64, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x72, 0x69, 0x78, 0x48, 0x00, 0x52, 0x15, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x61, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x12, 0x57, 0x0a, 0x15, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x70, 0x65,
	0x6c, 0x6c, 0x61, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x48, 0x00, 0x52, 0x13,
	0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x65,
	0x6c, 0x6c, 0x61, 0x12, 0x5d, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3a, 0x82, 0xb5, 0x18, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c,
	0x2f, 0x7a, 0x6f, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x6f, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x32, 0xfc, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x04, 0x53, 0x69,
	0x67, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x18, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2f, 0x73,
	0x69, 0x67, 0x6e, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x7a, 0x6f, 0x6e, 0x64, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x3b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_validator_client_keymanager_proto_rawDescOnce sync.Once
	file_protos_validator_client_keymanager_proto_rawDescData = file_protos_validator_client_keymanager_proto_rawDesc
)

func file_protos_validator_client_keymanager_proto_rawDescGZIP() []byte {
	file_protos_validator_client_keymanager_proto_rawDescOnce.Do(func() {
		file_protos_validator_client_keymanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_validator_client_keymanager_proto_rawDescData)
	})
	return file_protos_validator_client_keymanager_proto_rawDescData
}

var file_protos_validator_client_keymanager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_validator_client_keymanager_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_protos_validator_client_keymanager_proto_goTypes = []interface{}{
	(SignResponse_Status)(0),                    // 0: protos.validator.SignResponse.Status
	(*ListPublicKeysResponse)(nil),              // 1: protos.validator.ListPublicKeysResponse
	(*SignRequest)(nil),                         // 2: protos.validator.SignRequest
	(*SignResponse)(nil),                        // 3: protos.validator.SignResponse
	(*protos.BeaconBlock)(nil),                  // 4: protos.BeaconBlock
	(*protos.AttestationData)(nil),              // 5: protos.AttestationData
	(*protos.AggregateAttestationAndProof)(nil), // 6: protos.AggregateAttestationAndProof
	(*protos.VoluntaryExit)(nil),                // 7: protos.VoluntaryExit
	(*protos.BeaconBlockAltair)(nil),            // 8: protos.BeaconBlockAltair
	(*protos.SyncAggregatorSelectionData)(nil),  // 9: protos.SyncAggregatorSelectionData
	(*protos.ContributionAndProof)(nil),         // 10: protos.ContributionAndProof
	(*protos.BeaconBlockBellatrix)(nil),         // 11: protos.BeaconBlockBellatrix
	(*protos.BlindedBeaconBlockBellatrix)(nil),  // 12: protos.BlindedBeaconBlockBellatrix
	(*protos.ValidatorRegistrationV1)(nil),      // 13: protos.ValidatorRegistrationV1
	(*protos.BeaconBlockCapella)(nil),           // 14: protos.BeaconBlockCapella
	(*protos.BlindedBeaconBlockCapella)(nil),    // 15: protos.BlindedBeaconBlockCapella
	(*emptypb.Empty)(nil),                       // 16: google.protobuf.Empty
}
var file_protos_validator_client_keymanager_proto_depIdxs = []int32{
	4,  // 0: protos.validator.SignRequest.block:type_name -> protos.BeaconBlock
	5,  // 1: protos.validator.SignRequest.attestation_data:type_name -> protos.AttestationData
	6,  // 2: protos.validator.SignRequest.aggregate_attestation_and_proof:type_name -> protos.AggregateAttestationAndProof
	7,  // 3: protos.validator.SignRequest.exit:type_name -> protos.VoluntaryExit
	8,  // 4: protos.validator.SignRequest.block_altair:type_name -> protos.BeaconBlockAltair
	9,  // 5: protos.validator.SignRequest.sync_aggregator_selection_data:type_name -> protos.SyncAggregatorSelectionData
	10, // 6: protos.validator.SignRequest.contribution_and_proof:type_name -> protos.ContributionAndProof
	11, // 7: protos.validator.SignRequest.block_bellatrix:type_name -> protos.BeaconBlockBellatrix
	12, // 8: protos.validator.SignRequest.blinded_block_bellatrix:type_name -> protos.BlindedBeaconBlockBellatrix
	13, // 9: protos.validator.SignRequest.registration:type_name -> protos.ValidatorRegistrationV1
	14, // 10: protos.validator.SignRequest.block_capella:type_name -> protos.BeaconBlockCapella
	15, // 11: protos.validator.SignRequest.blinded_block_capella:type_name -> protos.BlindedBeaconBlockCapella
	0,  // 12: protos.validator.SignResponse.status:type_name -> protos.validator.SignResponse.Status
	16, // 13: protos.validator.RemoteSigner.ListValidatingPublicKeys:input_type -> google.protobuf.Empty
	2,  // 14: protos.validator.RemoteSigner.Sign:input_type -> protos.validator.SignRequest
	1,  // 15: protos.validator.RemoteSigner.ListValidatingPublicKeys:output_type -> protos.validator.ListPublicKeysResponse
	3,  // 16: protos.validator.RemoteSigner.Sign:output_type -> protos.validator.SignResponse
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_protos_validator_client_keymanager_proto_init() }
func file_protos_validator_client_keymanager_proto_init() {
	if File_protos_validator_client_keymanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_validator_client_keymanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_validator_client_keymanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_validator_client_keymanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_validator_client_keymanager_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SignRequest_Block)(nil),
		(*SignRequest_AttestationData)(nil),
		(*SignRequest_AggregateAttestationAndProof)(nil),
		(*SignRequest_Exit)(nil),
		(*SignRequest_Slot)(nil),
		(*SignRequest_Epoch)(nil),
		(*SignRequest_BlockAltair)(nil),
		(*SignRequest_SyncAggregatorSelectionData)(nil),
		(*SignRequest_ContributionAndProof)(nil),
		(*SignRequest_SyncMessageBlockRoot)(nil),
		(*SignRequest_BlockBellatrix)(nil),
		(*SignRequest_BlindedBlockBellatrix)(nil),
		(*SignRequest_Registration)(nil),
		(*SignRequest_BlockCapella)(nil),
		(*SignRequest_BlindedBlockCapella)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_validator_client_keymanager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_validator_client_keymanager_proto_goTypes,
		DependencyIndexes: file_protos_validator_client_keymanager_proto_depIdxs,
		EnumInfos:         file_protos_validator_client_keymanager_proto_enumTypes,
		MessageInfos:      file_protos_validator_client_keymanager_proto_msgTypes,
	}.Build()
	File_protos_validator_client_keymanager_proto = out.File
	file_protos_validator_client_keymanager_proto_rawDesc = nil
	file_protos_validator_client_keymanager_proto_goTypes = nil
	file_protos_validator_client_keymanager_proto_depIdxs = nil
}
