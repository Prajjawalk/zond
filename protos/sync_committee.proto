syntax = "proto3";

package protos;

import "protos/options.proto";

option go_package = "github.com/theQRL/zond/protos";

// Sync committee object to support light client.
message SyncCommitteeMessage {
  // Slot to which this contribution pertains.
  uint64 slot = 1 [(protos.cast_type) = "github.com/theQRL/zond/consensus-types/primitives.Slot"];

  // 32 byte block root for this signature.
  bytes block_root = 2 [(protos.ssz_size) = "32"];

  // Index of the validator that produced this signature.
  uint64 validator_index = 3 [(protos.cast_type) = "github.com/theQRL/zond/consensus-types/primitives.ValidatorIndex"];

  // Signature by the validator over the block root of `slot`.
  bytes signature = 4 [(protos.ssz_size) = "96"];
}

// Aggregated sync committee object to support light client.
message SyncCommitteeContribution {
  // Slot to which this contribution pertains.
  uint64 slot = 1 [(protos.cast_type) = "github.com/theQRL/zond/consensus-types/primitives.Slot"];

  // 32 byte block root for this signature.
  bytes block_root = 2 [(protos.ssz_size) = "32"];

  // The subcommittee this contribution pertains to out of the broader sync committee.
  uint64 subcommittee_index = 3;

  // A bit is set if a signature from the validator at the corresponding
  // index in the subcommittee is present in the aggregate `signature`.
  bytes aggregation_bits = 4 [(protos.ssz_size) = "16", (protos.cast_type) = "github.com/prysmaticlabs/go-bitfield.Bitvector128"];
  // Signature by the validator(s) over the block root of `slot`.
  bytes signature = 5 [(protos.ssz_size) = "96"];
}

// Aggregated sync committee signature object with selection proof to support light client.
message ContributionAndProof {
  // Index of the aggregator that produced this proof.
  uint64 aggregator_index = 1 [(protos.cast_type) = "github.com/theQRL/zond/consensus-types/primitives.ValidatorIndex"];

  SyncCommitteeContribution contribution = 2;

  // The selection proof itself.
  bytes selection_proof = 3 [(protos.ssz_size) = "96"];
}

// Signed aggregated sync committee signature object with selection proof to support light client.
message SignedContributionAndProof {
  ContributionAndProof message = 1;

  // Signature of the aggregator that produced `message`.
  bytes signature = 4 [(protos.ssz_size) = "96"];
}
